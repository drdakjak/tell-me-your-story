Transform: AWS::Serverless-2016-10-31
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /fetch_job_post:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchJobPost.Arn}/invocations
              responses: {}
          /process_job_post:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessJobPost.Arn}/invocations
              responses: {}
          /process_resume:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessResume.Arn}/invocations
              responses: {}
          /upload_resume:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadResume.Arn}/invocations
              responses: {}
          /optimise_resume:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptimiseResume.Arn}/invocations
              responses: {}
          /chat_resume:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatResume.Arn}/invocations
              responses: {}
          /invoke_chat:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvokeChat.Arn}/invocations
              responses: {}
          /reset_chat:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResetChat.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowOrigin: '''"*"'''
        AllowHeaders: '''"*"'''
        AllowMethods: '''"*"'''
        MaxAge: 5

  # Branch:
  #   Type: AWS::Amplify::Branch
  #   Properties:
  #     AppId: <String>
  #     BranchName: <String>

  # App:
  #   Type: AWS::Amplify::App
  #   Properties:
  #     Name: <String>

  FetchJobPost:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: FetchJobPost
      CodeUri: src/fetch_job_post
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: !Sub '{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}'
      Events:
        ApiPOSTFetchJobPost:
          Type: Api
          Properties:
            Path: /fetch_job_post
            Method: POST
            RestApiId: !Ref Api

  FetchJobPostLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${FetchJobPost}

  ProcessJobPost:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ProcessJobPost
      CodeUri: src/process_job_post
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTProcessJobPost:
          Type: Api
          Properties:
            Path: /process_job_post
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: !Sub '{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}'

      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable

  ProcessJobPostLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProcessJobPost}

  UploadResume:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UploadResume
      CodeUri: src/upload_resume
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: !Sub '{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}'
      Events:
        ApiPOSTuploadresume:
          Type: Api
          Properties:
            Path: /upload_resume
            Method: POST
            RestApiId: !Ref Api

  UploadResumeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${UploadResume}

  ProcessResume:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ProcessResume
      CodeUri: src/process_resume
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Events:
        ApiPOSTprocessresume:
          Type: Api
          Properties:
            Path: /process_resume
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: !Sub '{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable

  ProcessResumeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProcessResume}

  OptimiseResume:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: OptimiseResume
      CodeUri: src/optimise_resume
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 180
      Tracing: Active
      Events:
        ApiPOSToptimiseresume:
          Type: Api
          Properties:
            Path: /optimise_resume
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: !Sub '{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable

  OptimiseResumeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${OptimiseResume}

  ChatResume:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ChatResume
      CodeUri: src/chat_resume
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: '{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}'
          SESSIONTABLE_TABLE_NAME: !Ref SessionTable
          SESSIONTABLE_TABLE_ARN: !GetAtt SessionTable.Arn
      Events:
        ApiPOSTchatresume:
          Type: Api
          Properties:
            Path: /chat_resume
            Method: POST
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable

  ChatResumeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ChatResume}

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SessionTable
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-UserPool

  InvokeChat:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: InvokeChat
      CodeUri: src/invoke_chat
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          SESSIONTABLE_TABLE_NAME: !Ref SessionTable
          SESSIONTABLE_TABLE_ARN: !GetAtt SessionTable.Arn
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        ApiPOSTinvokechat:
          Type: Api
          Properties:
            Path: /invoke_chat
            Method: POST
            RestApiId: !Ref Api

  InvokeChatLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${InvokeChat}

  ResetChat:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ResetChat
      CodeUri: src/reset_chat
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          SESSIONTABLE_TABLE_NAME: !Ref SessionTable
          SESSIONTABLE_TABLE_ARN: !GetAtt SessionTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
      Events:
        ApiPOSTresetchat:
          Type: Api
          Properties:
            Path: /reset_chat
            Method: POST
            RestApiId: !Ref Api

  ResetChatLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ResetChat}

Metadata:
  AWS::Composer::Groups:
    Group:
      Label: API
      Members:
        - FetchJobPost
        - ProcessJobPost
        - UploadResume
        - ProcessResume
        - OptimiseResume
        - ChatResume
        - ResetChat
        - InvokeChat