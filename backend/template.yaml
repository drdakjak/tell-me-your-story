Transform: AWS::Serverless-2016-10-31

Parameters:
  Repository:
    Type: String
    Description: Repository url

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: dev
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      DefinitionBody:
        openapi: "3.0"
        info: {}
        paths:
          /fetch_job_post:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchJobPost.Arn}/invocations
              responses: {}
          /process_job_post:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessJobPost.Arn}/invocations
              responses: {}
          /process_resume:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessResume.Arn}/invocations
              responses: {}
          /upload_resume:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UploadResume.Arn}/invocations
              responses: {}
          /optimise_resume:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OptimiseResume.Arn}/invocations
              responses: {}
          /chat_resume:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatResume.Arn}/invocations
              responses: {}
          /invoke_chat:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InvokeChat.Arn}/invocations
              responses: {}
          /reset_chat:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResetChat.Arn}/invocations
              responses: {}
          /tailored_resume:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TailoredResumeGenerator.Arn}/invocations
              responses: {}
          /update_tailored_section:
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateTailoredSection.Arn}/invocations
              responses: {}
          /update_user:
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUser.Arn}/invocations
              responses: {}
          /fetch_user:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FetchUser.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
        MaxAge: 5

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: demo
      AppId: !GetAtt App.AppId
      EnableAutoBuild: true

  App:
    Type: AWS::Amplify::App
    Properties:
      Name: !Sub ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}
      Repository: !Ref Repository
      BuildSpec: |
        version: 1
        applications:
          - frontend:
              phases:
                preBuild:
                  commands:
                    - npm ci
                build:
                  commands:
                    - npm run build
              artifacts:
                baseDirectory: dist
                files:
                  - '**/*'
              cache:
                paths:
                  - node_modules/**/*
            appRoot: frontend
      CustomRules:
        - Source: '</^[^.]+$|\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json)$)([^.]+$)/>'
          Target: "/index.html"
          Status: "200"
      AccessToken: "{{resolve:secretsmanager:tell-me-your-story-github-token}}"
      EnvironmentVariables:
        - Name: AMPLIFY_MONOREPO_APP_ROOT
          Value: frontend
        - Name: VITE_REGION
          Value: !Ref AWS::Region
        - Name: VITE_API_ENDPOINT
          Value: !Sub https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/dev/
        - Name: VITE_USER_POOL_ID
          Value: !Ref CognitoUserPool
        - Name: VITE_USER_POOL_CLIENT_ID
          Value: !Ref CognitoUserPoolClient

  FetchJobPost:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: FetchJobPost
      CodeUri: src/fetch_job_post
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 100
      Tracing: Active
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: !Sub "{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}"
      Events:
        ApiPOSTFetchJobPost:
          Type: Api
          Properties:
            Path: /fetch_job_post
            Method: POST
            RestApiId: !Ref Api
      Architectures:
        - arm64

  FetchJobPostLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${FetchJobPost}

  ProcessJobPost:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ProcessJobPost
      CodeUri: src/process_job_post
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 100
      Tracing: Active
      Events:
        ApiPOSTProcessJobPost:
          Type: Api
          Properties:
            Path: /process_job_post
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: !Sub "{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}"

      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Architectures:
        - arm64

  ProcessJobPostLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProcessJobPost}

  UploadResume:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UploadResume
      CodeUri: src/upload_resume
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 100
      Tracing: Active
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: !Sub "{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}"
      Events:
        ApiPOSTuploadresume:
          Type: Api
          Properties:
            Path: /upload_resume
            Method: POST
            RestApiId: !Ref Api
      Architectures:
        - arm64

  UploadResumeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${UploadResume}

  ProcessResume:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ProcessResume
      CodeUri: src/process_resume
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 100
      Tracing: Active
      Events:
        ApiPOSTprocessresume:
          Type: Api
          Properties:
            Path: /process_resume
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: !Sub "{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Architectures:
        - arm64

  ProcessResumeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ProcessResume}

  OptimiseResume:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: OptimiseResume
      CodeUri: src/optimise_resume
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 100
      Tracing: Active
      Events:
        ApiPOSToptimiseresume:
          Type: Api
          Properties:
            Path: /optimise_resume
            Method: POST
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: !Sub "{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Architectures:
        - arm64

  OptimiseResumeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${OptimiseResume}

  ChatResume:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ChatResume
      CodeUri: src/chat_resume
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 100
      Tracing: Active
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: "{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}"
          SESSIONTABLE_TABLE_NAME: !Ref SessionTable
          SESSIONTABLE_TABLE_ARN: !GetAtt SessionTable.Arn
      Events:
        ApiPOSTchatresume:
          Type: Api
          Properties:
            Path: /chat_resume
            Method: POST
            RestApiId: !Ref Api
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Architectures:
        - arm64

  ChatResumeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ChatResume}

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SessionTable
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AutoVerifiedAttributes: []
      UsernameAttributes: []
      AliasAttributes: []
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 6
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUpFunction.Arn

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref CognitoUserPool
      GenerateSecret: false

  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/pre_signup
      Handler: handler.handler
      Runtime: python3.11
      Description: Pre-signup Lambda trigger for Cognito User Pool
      Architectures:
        - arm64

  PreSignUpFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PreSignUpFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  InvokeChat:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: InvokeChat
      CodeUri: src/invoke_chat
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 100
      Tracing: Active
      Environment:
        Variables:
          SESSIONTABLE_TABLE_NAME: !Ref SessionTable
          SESSIONTABLE_TABLE_ARN: !GetAtt SessionTable.Arn
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        ApiPOSTinvokechat:
          Type: Api
          Properties:
            Path: /invoke_chat
            Method: POST
            RestApiId: !Ref Api
      Architectures:
        - arm64

  InvokeChatLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${InvokeChat}

  ResetChat:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ResetChat
      CodeUri: src/reset_chat
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 100
      Tracing: Active
      Environment:
        Variables:
          SESSIONTABLE_TABLE_NAME: !Ref SessionTable
          SESSIONTABLE_TABLE_ARN: !GetAtt SessionTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
      Events:
        ApiPOSTresetchat:
          Type: Api
          Properties:
            Path: /reset_chat
            Method: POST
            RestApiId: !Ref Api
      Architectures:
        - arm64

  ResetChatLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${ResetChat}

  TailoredResumeGenerator:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: TailoredResumeGenerator
      CodeUri: src/tailored_resume_generator
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 100
      Tracing: Active
      Architectures:
        - arm64
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
          OPENAI_API_KEY: "{{resolve:secretsmanager:dev/TellMeYourStory:SecretString:OPENAI_API_KEY}}"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        ApiGETtailoredresume:
          Type: Api
          Properties:
            Path: /tailored_resume
            Method: GET
            RestApiId: !Ref Api

  TailoredResumeGeneratorLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${TailoredResumeGenerator}

  UpdateTailoredSection:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UpdateTailoredSection
      CodeUri: src/update_tailored_section
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 100
      Tracing: Active
      Architectures:
        - arm64
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        ApiPUTupdatetailoredsection:
          Type: Api
          Properties:
            Path: /update_tailored_section
            Method: PUT
            RestApiId: !Ref Api

  UpdateTailoredSectionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateTailoredSection}

  UpdateUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UpdateUser
      CodeUri: src/update_user
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Architectures:
        - arm64
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Events:
        ApiPUTupdateuser:
          Type: Api
          Properties:
            Path: /update_user
            Method: PUT
            RestApiId: !Ref Api

  UpdateUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateUser}

  FetchUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: FetchUser
      CodeUri: src/fetch_user
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 30
      Tracing: Active
      Architectures:
        - arm64
      Events:
        ApiGETfetchuser:
          Type: Api
          Properties:
            Path: /fetch_user
            Method: GET
            RestApiId: !Ref Api
      Environment:
        Variables:
          USERTABLE_TABLE_NAME: !Ref UserTable
          USERTABLE_TABLE_ARN: !GetAtt UserTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable

  FetchUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${FetchUser}

Metadata:
  AWS::Composer::Groups:
    Group:
      Label: API
      Members:
        - FetchJobPost
        - ProcessJobPost
        - UploadResume
        - ProcessResume
        - OptimiseResume
        - ChatResume
        - ResetChat
        - InvokeChat
        - TailoredResumeGenerator
        - UpdateTailoredSection
        - UpdateUser
        - FetchUser

Outputs:
  CognitoUserPool:
    Value: !Ref CognitoUserPool
  CognitoUserPoolClient:
    Value: !Ref CognitoUserPoolClient
  ApiGatewayBaseUrl:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/dev/
  Region:
    Value: !Sub ${AWS::Region}
